[gd_scene load_steps=8 format=3 uid="uid://1edh2rs6gc4v"]

[ext_resource type="PackedScene" uid="uid://j32perqlaaws" path="res://tscn/frog.tscn" id="1_oip3v"]
[ext_resource type="Texture2D" uid="uid://cp5jilmte88xo" path="res://art/tileset/tileset.png" id="2_xnago"]
[ext_resource type="PackedScene" uid="uid://d207u0lh0i81m" path="res://tscn/floatables.tscn" id="3_q2diy"]

[sub_resource type="GDScript" id="GDScript_sxywy"]
script/source = "extends Node2D

const SPEED = 50.0
const TILE_SIZE = 32.0
const DIMENSIONS = Vector2(854, 480)

const ROW_1_WATER = 240
const ROW_2_WATER = ROW_1_WATER - 32
const ROW_3_WATER = ROW_2_WATER - 32
const ROW_4_WATER = ROW_3_WATER - 32
const ROW_5_WATER = ROW_4_WATER - 32

@export var floatable_scene : PackedScene
@export var frog_scene : PackedScene

var on_floatables : Array
var dict_interchangeable : Dictionary # stores a false for the object for a simple state machine, i.e. sink / swim up for turtles
var dict_movement_direction : Dictionary
var dict_taken_lillypads : Dictionary
var lillypads : Array

var current_frog

# Called when the node enters the scene tree for the first time.
func _ready():
	current_frog = $Frog
	
	# --- Lillypad ---
	# create animations just once! They are (somehow) shared over all objects ¯\\_(ツ)_/¯
	create_lilly_pad_animations($Floatables_Lillypad_01)
	
	create_lilly_pad($Floatables_Lillypad_01, Vector2(368, ROW_5_WATER))
	create_lilly_pad($Floatables_Lillypad_02, Vector2(160, ROW_5_WATER))
	create_lilly_pad($Floatables_Lillypad_03, Vector2(368 + 160, ROW_5_WATER))
	create_lilly_pad($Floatables_Lillypad_04, Vector2(TILE_SIZE, ROW_5_WATER))
	create_lilly_pad($Floatables_Lillypad_05, Vector2(DIMENSIONS.x - TILE_SIZE, ROW_5_WATER))
	
	lillypads.append($Floatables_Lillypad_01)
	lillypads.append($Floatables_Lillypad_02)
	lillypads.append($Floatables_Lillypad_03)
	lillypads.append($Floatables_Lillypad_04)
	lillypads.append($Floatables_Lillypad_05)
	dict_taken_lillypads[$Floatables_Lillypad_01] = false
	dict_taken_lillypads[$Floatables_Lillypad_02] = false
	dict_taken_lillypads[$Floatables_Lillypad_03] = false
	dict_taken_lillypads[$Floatables_Lillypad_04] = false
	dict_taken_lillypads[$Floatables_Lillypad_05] = false
	
	# --- Turtle ---
	# create animations just once! They are (somehow) shared over all objects ¯\\_(ツ)_/¯
	create_turtle_animations($Floatables_Turtle_01)
	
	create_turtle($Floatables_Turtle_01, Vector2(0, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_02, Vector2(TILE_SIZE, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_03, Vector2(TILE_SIZE * 2, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_04, Vector2(160, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_05, Vector2(160 + TILE_SIZE, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_06, Vector2(160 + TILE_SIZE * 2, ROW_1_WATER), false)
	create_turtle($Floatables_Turtle_07, Vector2(DIMENSIONS.x - TILE_SIZE, ROW_3_WATER), false)
	create_turtle($Floatables_Turtle_08, Vector2(DIMENSIONS.x - TILE_SIZE * 2, ROW_3_WATER), false)
	create_turtle($Floatables_Turtle_09, Vector2(DIMENSIONS.x - TILE_SIZE * 3, ROW_3_WATER), false)
	create_turtle($Floatables_Turtle_10, Vector2(DIMENSIONS.x - TILE_SIZE * 6, ROW_3_WATER), false)
	create_turtle($Floatables_Turtle_11, Vector2(DIMENSIONS.x - TILE_SIZE * 7, ROW_3_WATER), false)
	create_turtle($Floatables_Turtle_12, Vector2(DIMENSIONS.x - TILE_SIZE * 8, ROW_3_WATER), false)
	
	# --- Log / Croc ---
	create_log_croc_animations($Floatables_Log_Croc_01)
	
	create_log_croc($Floatables_Log_Croc_01, Vector2(DIMENSIONS.x, ROW_2_WATER), true)
	create_log_croc($Floatables_Log_Croc_02, Vector2(DIMENSIONS.x - TILE_SIZE * 2, ROW_2_WATER), true)
	create_log_croc($Floatables_Log_Croc_03, Vector2(DIMENSIONS.x - TILE_SIZE * 5, ROW_2_WATER), true)
	create_log_croc($Floatables_Log_Croc_04, Vector2(DIMENSIONS.x - TILE_SIZE * 7, ROW_2_WATER), true)
	create_log_croc($Floatables_Log_Croc_05, Vector2(DIMENSIONS.x, ROW_4_WATER), true)
	create_log_croc($Floatables_Log_Croc_06, Vector2(TILE_SIZE * 2, ROW_4_WATER), true)
	create_log_croc($Floatables_Log_Croc_07, Vector2(TILE_SIZE * 5, ROW_4_WATER), true)
	create_log_croc($Floatables_Log_Croc_08, Vector2(TILE_SIZE * 7, ROW_4_WATER), true)
	
#	var new_log_croc = instantiate_and_set_owner_and_parent(floatable_scene, self)
#	create_log_croc($Floatables_Log_Croc_08, Vector2(TILE_SIZE * 7, ROW_5_WATER), false)
	
	for entry in dict_interchangeable.keys():
		entry.timer.connect(_on_floatables_interchangeable_timer)
		entry.flotable_entered.connect(_on_floatables_interchangeable_body_entered)
		entry.flotable_exited.connect(_on_floatables_interchangeable_body_exited)
	
	for lillypad in lillypads:
		lillypad.flotable_entered.connect(_on_floatables_lillypad_body_entered)

static func instantiate_and_set_owner_and_parent(scene : PackedScene, owner : Node2D) -> Node2D:
	var node : Node2D = scene.instantiate()
	owner.add_child(node)
	node.set_owner(owner)
	return node

func create_lilly_pad(object, lillypad_position):
	var collision_shape = object.get_node(\"Area2D/CollisionShape2D\")
	var shape = RectangleShape2D.new()
	shape.set_size(Vector2(32, 32))
	
	collision_shape.shape = shape
	
#	add_frame(anim: StringName, texture: Texture2D, duration: float = 1.0, at_position: int = -1)
	var image_selector = randi()%2 == 0
	var animation_name : String
	if image_selector:
		animation_name = \"lillypad01\"
	else:
		animation_name = \"lillypad02\"
	
	object.play(animation_name)
	object.position = lillypad_position

func create_lilly_pad_animations(object):
	object.sprite_frames.add_animation(\"lillypad01\")
	object.sprite_frames.set_animation_loop(\"lillypad01\", true)
	object.sprite_frames.add_animation(\"lillypad02\")
	object.sprite_frames.set_animation_loop(\"lillypad02\", true)
	
	var image_lillypad_01 = Image.load_from_file(\"res://art/floatables/lillypad01.png\")
	var texture_lillypad_01 = ImageTexture.create_from_image(image_lillypad_01)
	
	var image_lillypad_02 = Image.load_from_file(\"res://art/floatables/lillypad02.png\")
	var texture_lillypad_02 = ImageTexture.create_from_image(image_lillypad_02)
	
	object.sprite_frames.add_frame(\"lillypad01\", texture_lillypad_01, 1.0)
	object.sprite_frames.add_frame(\"lillypad02\", texture_lillypad_02, 1.0)

func create_turtle(object, turtle_position, flipped):
	object.flip_h = flipped
	var collision_shape = object.get_node(\"Area2D/CollisionShape2D\")
	var shape = RectangleShape2D.new()
	shape.set_size(Vector2(32, 32))
	
	collision_shape.shape = shape
	
	object.position = turtle_position
	
	object.play(\"swim_turtle\")
	
	dict_interchangeable[object] = false
	if flipped:
		dict_movement_direction[object] = -1.0
	else:
		dict_movement_direction[object] = 1.0

func create_turtle_animations(object):
	object.sprite_frames.add_animation(\"swim_turtle\")
	object.sprite_frames.add_animation(\"sink\")
	
	var image_turtle_00 = Image.load_from_file(\"res://art/floatables/turtle_swim_00.png\")
	var texture_turtle_00 = ImageTexture.create_from_image(image_turtle_00)
	
	var image_turtle_01 = Image.load_from_file(\"res://art/floatables/turtle_swim_01.png\")
	var texture_turtle_01 = ImageTexture.create_from_image(image_turtle_01)
	
	object.sprite_frames.add_frame(\"swim_turtle\", texture_turtle_00, 3.0)
	object.sprite_frames.add_frame(\"swim_turtle\", texture_turtle_01, 3.0)
	
	var image_sink_turtle_00 = Image.load_from_file(\"res://art/floatables/turtle_sink_00.png\")
	var texture_sink_turtle_00 = ImageTexture.create_from_image(image_sink_turtle_00)
	
	var image_sink_turtle_01 = Image.load_from_file(\"res://art/floatables/turtle_sink_01.png\")
	var texture_sink_turtle_01 = ImageTexture.create_from_image(image_sink_turtle_01)
	
	object.sprite_frames.add_frame(\"sink\", texture_sink_turtle_00, 20.0)
	object.sprite_frames.add_frame(\"sink\", texture_sink_turtle_01, 20.0)
	
	object.sprite_frames.set_animation_loop(\"swim_turtle\", true)
	object.sprite_frames.set_animation_loop(\"sink\", false)

func create_log_croc(object, log_position, flipped):
	object.flip_h = flipped
	var collision_shape = object.get_node(\"Area2D/CollisionShape2D\")
	var shape = RectangleShape2D.new()
	shape.set_size(Vector2(64, 32))
	
	collision_shape.shape = shape
	
	object.position = log_position
	
	object.play(\"log\")
	
	var croc_selector = randi()%3 == 0
	
	if croc_selector:
		dict_interchangeable[object] = true
		var collision_shape_death_zone = object.get_node(\"Area2DDeathZone/CollisionShape2D\")
		var shape_death_zone = RectangleShape2D.new()
		shape_death_zone.set_size(Vector2(24, 32))
		collision_shape_death_zone.position.x -= 20
		
		collision_shape_death_zone.shape = shape_death_zone
		# Disable the CollisionShape2D
		collision_shape_death_zone.set_deferred(\"disabled\", true)
	else:
		dict_interchangeable[object] = false
	
	if flipped:
		dict_movement_direction[object] = -1.0
	else:
		dict_movement_direction[object] = 1.0

func create_log_croc_animations(object):
	object.sprite_frames.add_animation(\"log\")
	object.sprite_frames.add_animation(\"chomp\")
	object.sprite_frames.set_animation_loop(\"log\", true)
	object.sprite_frames.set_animation_loop(\"chomp\", false)
	
	var image = Image.load_from_file(\"res://art/floatables/log.png\")
	var texture = ImageTexture.create_from_image(image)
	
	object.sprite_frames.add_frame(\"log\", texture, 1.0)
	
	var image_chomp_00 = Image.load_from_file(\"res://art/floatables/crocodile_chomp_00.png\")
	var texture_chomp_00 = ImageTexture.create_from_image(image_chomp_00)
	
	var image_chomp_01 = Image.load_from_file(\"res://art/floatables/crocodile_chomp_01.png\")
	var texture_chomp_01 = ImageTexture.create_from_image(image_chomp_01)
	
	# add them multiple times so the croc choms some times and then stops and turns into a log again
	for i in range(1, 6):
		object.sprite_frames.add_frame(\"chomp\", texture_chomp_00, 1.0)
		object.sprite_frames.add_frame(\"chomp\", texture_chomp_01, 1.0)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func _physics_process(delta):
	for dict_entry in dict_interchangeable.keys():
		floatable_off_screen_resetter(dict_entry)
		dict_entry.position.x += SPEED * delta * dict_movement_direction[dict_entry]
		
		if dict_interchangeable[dict_entry]:
			# !dict_entry.is_playing() indicates whether the animation is finished or not
			if (dict_entry.get_animation() == \"sink\" && !dict_entry.is_playing()):
				dict_entry.play(\"swim_turtle\")
				dict_entry.get_node(\"Timer\").start()
				dict_interchangeable[dict_entry] = !dict_interchangeable[dict_entry]
			if (dict_entry.get_animation() == \"chomp\" && !dict_entry.is_playing()):
				dict_entry.play(\"log\")
				dict_entry.get_node(\"Timer\").start()
				dict_entry.get_node(\"Area2DDeathZone/CollisionShape2D\").set_deferred(\"disabled\", true)
		else:
			if (dict_entry.get_animation() == \"sink\" && !dict_entry.is_playing()):
				dict_entry.play(\"swim_turtle\")
				on_floatables.erase(dict_entry)
				dict_entry.hide()
				dict_entry.get_node(\"Timer\").start()
				dict_interchangeable[dict_entry] = !dict_interchangeable[dict_entry]
		
	for floatable in on_floatables:
		current_frog.set_on_floatable(true)
		if \"Floatables_Turtle\" in floatable.name || \"Floatables_Log_Croc\" in floatable.name:
			current_frog.set_floatable_velocity(Vector2(SPEED * dict_movement_direction[floatable], 0.0))
		else:
			current_frog.set_floatable_velocity(Vector2.ZERO)
	if on_floatables.is_empty():
		current_frog.set_on_floatable(false)
		current_frog.set_floatable_velocity(Vector2.ZERO)

func floatable_off_screen_resetter(object):
	if object.position.x > DIMENSIONS.x + TILE_SIZE:
		object.position.x = 0 - TILE_SIZE
	if object.position.x < 0 - TILE_SIZE:
		object.position.x = DIMENSIONS.x + TILE_SIZE

func sink_or_swim_up(turtle):
	turtle.get_node(\"Timer\").stop()
	turtle.get_node(\"Timer\").wait_time = randf_range(1.0, 3.0)
	if dict_interchangeable[turtle]:
		turtle.show()
		turtle.play_backwards(\"sink\")
	else:
		turtle.play(\"sink\")

func chomp(log_croc):
	log_croc.get_node(\"Area2DDeathZone/CollisionShape2D\").set_deferred(\"disabled\", false)
	log_croc.get_node(\"Timer\").stop()
	log_croc.get_node(\"Timer\").wait_time = randf_range(1.0, 3.0)
	log_croc.play(\"chomp\")

func _on_floatables_interchangeable_body_entered(object):
	on_floatables.append(object)

func _on_floatables_interchangeable_body_exited(object):
	on_floatables.erase(object)

func _on_floatables_interchangeable_timer(object):
	if \"Floatables_Turtle\" in object.name:
		sink_or_swim_up(object)
	if \"Floatables_Log_Croc\" in object.name && dict_interchangeable[object]:
		chomp(object)

func _on_floatables_lillypad_body_entered(object):
	if (!dict_taken_lillypads[object]):
		dict_taken_lillypads[object] = true
		var image_frog = Image.load_from_file(\"res://art/frog/up_idle.png\")
		var texture_frog = ImageTexture.create_from_image(image_frog)
		var finish_frog = Sprite2D.new()
		finish_frog.texture = texture_frog
		add_child(finish_frog)
		finish_frog.position = object.position
		finish_frog.z_index = 999
		
		current_frog.reset()
		
		# activate StaticBody2D such that if the player wants to jump towards the same lilly pad twice they get blocked
		var collison_shape = object.get_node(\"StaticBody2DLillyPadTaken/CollisionShape2D\")
		var shape = RectangleShape2D.new()
		shape.set_size(Vector2(32, 32))
		
		collison_shape.shape = shape
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_4sdko"]
size = Vector2(864, 255)

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_myyq3"]
texture = ExtResource("2_xnago")
texture_region_size = Vector2i(32, 32)
0:0/0 = 0
0:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:0/0/physics_layer_0/angular_velocity = 0.0
0:0/0/physics_layer_1/linear_velocity = Vector2(0, 0)
0:0/0/physics_layer_1/angular_velocity = 0.0
1:0/0 = 0
1:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:0/0/physics_layer_0/angular_velocity = 0.0
1:0/0/physics_layer_1/linear_velocity = Vector2(0, 0)
1:0/0/physics_layer_1/angular_velocity = 0.0
2:0/0 = 0
2:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:0/0/physics_layer_0/angular_velocity = 0.0
2:0/0/physics_layer_1/linear_velocity = Vector2(0, 0)
2:0/0/physics_layer_1/angular_velocity = 0.0
3:0/0 = 0
3:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:0/0/physics_layer_0/angular_velocity = 0.0
3:0/0/physics_layer_1/linear_velocity = Vector2(0, 0)
3:0/0/physics_layer_1/angular_velocity = 0.0
4:0/0 = 0
4:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:0/0/physics_layer_0/angular_velocity = 0.0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)
4:0/0/physics_layer_1/linear_velocity = Vector2(0, 0)
4:0/0/physics_layer_1/angular_velocity = 0.0
0:1/0 = 0
0:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:1/0/physics_layer_0/angular_velocity = 0.0
0:1/0/physics_layer_1/linear_velocity = Vector2(0, 0)
0:1/0/physics_layer_1/angular_velocity = 0.0
1:1/0 = 0
1:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:1/0/physics_layer_0/angular_velocity = 0.0
1:1/0/physics_layer_1/linear_velocity = Vector2(0, 0)
1:1/0/physics_layer_1/angular_velocity = 0.0
2:1/0 = 0
2:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:1/0/physics_layer_0/angular_velocity = 0.0
2:1/0/physics_layer_1/linear_velocity = Vector2(0, 0)
2:1/0/physics_layer_1/angular_velocity = 0.0
3:1/0 = 0
3:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:1/0/physics_layer_0/angular_velocity = 0.0
3:1/0/physics_layer_1/linear_velocity = Vector2(0, 0)
3:1/0/physics_layer_1/angular_velocity = 0.0
4:1/0 = 0
4:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:1/0/physics_layer_0/angular_velocity = 0.0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)
4:1/0/physics_layer_1/linear_velocity = Vector2(0, 0)
4:1/0/physics_layer_1/angular_velocity = 0.0
0:2/0 = 0
0:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:2/0/physics_layer_0/angular_velocity = 0.0
0:2/0/physics_layer_1/linear_velocity = Vector2(0, 0)
0:2/0/physics_layer_1/angular_velocity = 0.0
1:2/0 = 0
1:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:2/0/physics_layer_0/angular_velocity = 0.0
1:2/0/physics_layer_1/linear_velocity = Vector2(0, 0)
1:2/0/physics_layer_1/angular_velocity = 0.0
0:3/0 = 0
0:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:3/0/physics_layer_0/angular_velocity = 0.0
0:3/0/physics_layer_1/linear_velocity = Vector2(0, 0)
0:3/0/physics_layer_1/angular_velocity = 0.0
1:3/0 = 0
1:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:3/0/physics_layer_0/angular_velocity = 0.0
1:3/0/physics_layer_1/linear_velocity = Vector2(0, 0)
1:3/0/physics_layer_1/angular_velocity = 0.0
2:3/0 = 0
2:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:3/0/physics_layer_0/angular_velocity = 0.0
2:3/0/physics_layer_1/linear_velocity = Vector2(0, 0)
2:3/0/physics_layer_1/angular_velocity = 0.0
3:3/0 = 0
3:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:3/0/physics_layer_0/angular_velocity = 0.0
3:3/0/physics_layer_1/linear_velocity = Vector2(0, 0)
3:3/0/physics_layer_1/angular_velocity = 0.0
3:3/0/physics_layer_1/polygon_0/points = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)
0:4/0 = 0
0:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:4/0/physics_layer_0/angular_velocity = 0.0
0:4/0/physics_layer_1/linear_velocity = Vector2(0, 0)
0:4/0/physics_layer_1/angular_velocity = 0.0
1:4/0 = 0
1:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:4/0/physics_layer_0/angular_velocity = 0.0
1:4/0/physics_layer_1/linear_velocity = Vector2(0, 0)
1:4/0/physics_layer_1/angular_velocity = 0.0
3:4/0 = 0
3:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:4/0/physics_layer_0/angular_velocity = 0.0
3:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)
3:4/0/physics_layer_1/linear_velocity = Vector2(0, 0)
3:4/0/physics_layer_1/angular_velocity = 0.0
4:2/0 = 0
4:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:2/0/physics_layer_0/angular_velocity = 0.0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)
4:2/0/physics_layer_1/linear_velocity = Vector2(0, 0)
4:2/0/physics_layer_1/angular_velocity = 0.0
3:2/0 = 0
3:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:2/0/physics_layer_0/angular_velocity = 0.0
3:2/0/physics_layer_1/linear_velocity = Vector2(0, 0)
3:2/0/physics_layer_1/angular_velocity = 0.0
2:2/0 = 0
2:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:2/0/physics_layer_0/angular_velocity = 0.0
2:2/0/physics_layer_1/linear_velocity = Vector2(0, 0)
2:2/0/physics_layer_1/angular_velocity = 0.0
2:4/0 = 0
2:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:4/0/physics_layer_0/angular_velocity = 0.0
2:4/0/physics_layer_1/linear_velocity = Vector2(0, 0)
2:4/0/physics_layer_1/angular_velocity = 0.0

[sub_resource type="TileSet" id="TileSet_dtbcr"]
tile_size = Vector2i(32, 32)
physics_layer_0/collision_layer = 1
physics_layer_1/collision_layer = 0
physics_layer_1/collision_mask = 2
sources/0 = SubResource("TileSetAtlasSource_myyq3")

[node name="Main" type="Node2D"]
script = SubResource("GDScript_sxywy")
floatable_scene = ExtResource("3_q2diy")
frog_scene = ExtResource("1_oip3v")

[node name="Area2D_water" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D_water"]
position = Vector2(432, 127.5)
shape = SubResource("RectangleShape2D_4sdko")

[node name="TileMap" type="TileMap" parent="."]
texture_filter = 1
tile_set = SubResource("TileSet_dtbcr")
cell_quadrant_size = 32
format = 2
layer_0/name = "Ground01"
layer_0/tile_data = PackedInt32Array(0, 131072, 0, 65536, 131072, 0, 131072, 131072, 0, 196608, 131072, 0, 262144, 131072, 0, 327680, 131072, 0, 393216, 131072, 0, 458752, 131072, 0, 524288, 131072, 0, 589824, 131072, 0, 655360, 131072, 0, 720896, 131072, 0, 786432, 131072, 0, 851968, 131072, 0, 917504, 131072, 0, 1, 131072, 0, 65537, 131072, 0, 131073, 131072, 0, 196609, 131072, 0, 262145, 131072, 0, 327681, 131072, 0, 393217, 131072, 0, 458753, 131072, 0, 524289, 131072, 0, 589825, 131072, 0, 655361, 131072, 0, 720897, 131072, 0, 786433, 131072, 0, 851969, 131072, 0, 917505, 131072, 0, 2, 131072, 0, 65538, 131072, 0, 131074, 131072, 0, 196610, 131072, 0, 262146, 131072, 0, 327682, 131072, 0, 393218, 131072, 0, 458754, 131072, 0, 524290, 131072, 0, 589826, 131072, 0, 655362, 131072, 0, 720898, 131072, 0, 786434, 131072, 0, 851970, 131072, 0, 917506, 131072, 0, 3, 131072, 0, 65539, 131072, 0, 131075, 131072, 0, 196611, 131072, 0, 262147, 131072, 0, 327683, 131072, 0, 393219, 131072, 0, 458755, 131072, 0, 524291, 131072, 0, 589827, 131072, 0, 655363, 131072, 0, 720899, 131072, 0, 786435, 131072, 0, 851971, 131072, 0, 917507, 131072, 0, 4, 131072, 0, 65540, 131072, 0, 131076, 131072, 0, 196612, 131072, 0, 262148, 131072, 0, 327684, 131072, 0, 393220, 131072, 0, 458756, 131072, 0, 524292, 131072, 0, 589828, 131072, 0, 655364, 131072, 0, 720900, 131072, 0, 786436, 131072, 0, 851972, 131072, 0, 917508, 131072, 0, 5, 131072, 0, 65541, 131072, 0, 131077, 131072, 0, 196613, 131072, 0, 262149, 131072, 0, 327685, 131072, 0, 393221, 131072, 0, 458757, 131072, 0, 524293, 131072, 0, 589829, 131072, 0, 655365, 131072, 0, 720901, 131072, 0, 786437, 131072, 0, 851973, 131072, 0, 917509, 131072, 0, 6, 131072, 0, 65542, 131072, 0, 131078, 131072, 0, 196614, 131072, 0, 262150, 131072, 0, 327686, 131072, 0, 393222, 131072, 0, 458758, 131072, 0, 524294, 131072, 0, 589830, 131072, 0, 655366, 131072, 0, 720902, 131072, 0, 786438, 131072, 0, 851974, 131072, 0, 917510, 131072, 0, 7, 131072, 0, 65543, 131072, 0, 131079, 131072, 0, 196615, 131072, 0, 262151, 131072, 0, 327687, 131072, 0, 393223, 131072, 0, 458759, 131072, 0, 524295, 131072, 0, 589831, 131072, 0, 655367, 131072, 0, 720903, 131072, 0, 786439, 131072, 0, 851975, 131072, 0, 917511, 131072, 0, 8, 131072, 0, 65544, 131072, 0, 131080, 131072, 0, 196616, 131072, 0, 262152, 131072, 0, 327688, 131072, 0, 393224, 131072, 0, 458760, 131072, 0, 524296, 131072, 0, 589832, 131072, 0, 655368, 131072, 0, 720904, 131072, 0, 786440, 131072, 0, 851976, 131072, 0, 917512, 131072, 0, 9, 131072, 0, 65545, 131072, 0, 131081, 131072, 0, 196617, 131072, 0, 262153, 131072, 0, 327689, 131072, 0, 393225, 131072, 0, 458761, 131072, 0, 524297, 131072, 0, 589833, 131072, 0, 655369, 131072, 0, 720905, 131072, 0, 786441, 131072, 0, 851977, 131072, 0, 917513, 131072, 0, 10, 131072, 0, 65546, 131072, 0, 131082, 131072, 0, 196618, 131072, 0, 262154, 131072, 0, 327690, 131072, 0, 393226, 131072, 0, 458762, 131072, 0, 524298, 131072, 0, 589834, 131072, 0, 655370, 131072, 0, 720906, 131072, 0, 786442, 131072, 0, 851978, 131072, 0, 917514, 131072, 0, 11, 131072, 0, 65547, 131072, 0, 131083, 131072, 0, 196619, 131072, 0, 262155, 131072, 0, 327691, 131072, 0, 393227, 131072, 0, 458763, 131072, 0, 524299, 131072, 0, 589835, 131072, 0, 655371, 131072, 0, 720907, 131072, 0, 786443, 131072, 0, 851979, 131072, 0, 917515, 131072, 0, 12, 131072, 0, 65548, 131072, 0, 131084, 131072, 0, 196620, 131072, 0, 262156, 131072, 0, 327692, 131072, 0, 393228, 131072, 0, 458764, 131072, 0, 524300, 131072, 0, 589836, 131072, 0, 655372, 131072, 0, 720908, 131072, 0, 786444, 131072, 0, 851980, 131072, 0, 917516, 131072, 0, 13, 131072, 0, 65549, 131072, 0, 131085, 131072, 0, 196621, 131072, 0, 262157, 131072, 0, 327693, 131072, 0, 393229, 131072, 0, 458765, 131072, 0, 524301, 131072, 0, 589837, 131072, 0, 655373, 131072, 0, 720909, 131072, 0, 786445, 131072, 0, 851981, 131072, 0, 917517, 131072, 0, 14, 131072, 0, 65550, 131072, 0, 131086, 131072, 0, 196622, 131072, 0, 262158, 131072, 0, 327694, 131072, 0, 393230, 131072, 0, 458766, 131072, 0, 524302, 131072, 0, 589838, 131072, 0, 655374, 131072, 0, 720910, 131072, 0, 786446, 131072, 0, 851982, 131072, 0, 917518, 131072, 0, 15, 131072, 0, 65551, 131072, 0, 131087, 131072, 0, 196623, 131072, 0, 262159, 131072, 0, 327695, 131072, 0, 393231, 131072, 0, 458767, 131072, 0, 524303, 131072, 0, 589839, 131072, 0, 655375, 131072, 0, 720911, 131072, 0, 786447, 131072, 0, 851983, 131072, 0, 917519, 131072, 0, 16, 131072, 0, 65552, 131072, 0, 131088, 131072, 0, 196624, 131072, 0, 262160, 131072, 0, 327696, 131072, 0, 393232, 131072, 0, 458768, 131072, 0, 524304, 131072, 0, 589840, 131072, 0, 655376, 131072, 0, 720912, 131072, 0, 786448, 131072, 0, 851984, 131072, 0, 917520, 131072, 0, 17, 131072, 0, 65553, 131072, 0, 131089, 131072, 0, 196625, 131072, 0, 262161, 131072, 0, 327697, 131072, 0, 393233, 131072, 0, 458769, 131072, 0, 524305, 131072, 0, 589841, 131072, 0, 655377, 131072, 0, 720913, 131072, 0, 786449, 131072, 0, 851985, 131072, 0, 917521, 131072, 0, 18, 131072, 0, 65554, 131072, 0, 131090, 131072, 0, 196626, 131072, 0, 262162, 131072, 0, 327698, 131072, 0, 393234, 131072, 0, 458770, 131072, 0, 524306, 131072, 0, 589842, 131072, 0, 655378, 131072, 0, 720914, 131072, 0, 786450, 131072, 0, 851986, 131072, 0, 917522, 131072, 0, 19, 131072, 0, 65555, 131072, 0, 131091, 131072, 0, 196627, 131072, 0, 262163, 131072, 0, 327699, 131072, 0, 393235, 131072, 0, 458771, 131072, 0, 524307, 131072, 0, 589843, 131072, 0, 655379, 131072, 0, 720915, 131072, 0, 786451, 131072, 0, 851987, 131072, 0, 917523, 131072, 0, 20, 131072, 0, 65556, 131072, 0, 131092, 131072, 0, 196628, 131072, 0, 262164, 131072, 0, 327700, 131072, 0, 393236, 131072, 0, 458772, 131072, 0, 524308, 131072, 0, 589844, 131072, 0, 655380, 131072, 0, 720916, 131072, 0, 786452, 131072, 0, 851988, 131072, 0, 917524, 131072, 0, 21, 131072, 0, 65557, 131072, 0, 131093, 131072, 0, 196629, 131072, 0, 262165, 131072, 0, 327701, 131072, 0, 393237, 131072, 0, 458773, 131072, 0, 524309, 131072, 0, 589845, 131072, 0, 655381, 131072, 0, 720917, 131072, 0, 786453, 131072, 0, 851989, 131072, 0, 917525, 131072, 0, 22, 131072, 0, 65558, 131072, 0, 131094, 131072, 0, 196630, 131072, 0, 262166, 131072, 0, 327702, 131072, 0, 393238, 131072, 0, 458774, 131072, 0, 524310, 131072, 0, 589846, 131072, 0, 655382, 131072, 0, 720918, 131072, 0, 786454, 131072, 0, 851990, 131072, 0, 917526, 131072, 0, 23, 131072, 0, 65559, 131072, 0, 131095, 131072, 0, 196631, 131072, 0, 262167, 131072, 0, 327703, 131072, 0, 393239, 131072, 0, 458775, 131072, 0, 524311, 131072, 0, 589847, 131072, 0, 655383, 131072, 0, 720919, 131072, 0, 786455, 131072, 0, 851991, 131072, 0, 917527, 131072, 0, 24, 131072, 0, 65560, 131072, 0, 131096, 131072, 0, 196632, 131072, 0, 262168, 131072, 0, 327704, 131072, 0, 393240, 131072, 0, 458776, 131072, 0, 524312, 131072, 0, 589848, 131072, 0, 655384, 131072, 0, 720920, 131072, 0, 786456, 131072, 0, 851992, 131072, 0, 917528, 131072, 0, 25, 131072, 0, 65561, 131072, 0, 131097, 131072, 0, 196633, 131072, 0, 262169, 131072, 0, 327705, 131072, 0, 393241, 131072, 0, 458777, 131072, 0, 524313, 131072, 0, 589849, 131072, 0, 655385, 131072, 0, 720921, 131072, 0, 786457, 131072, 0, 851993, 131072, 0, 917529, 131072, 0, 26, 131072, 0, 65562, 131072, 0, 131098, 131072, 0, 196634, 131072, 0, 262170, 131072, 0, 327706, 131072, 0, 393242, 131072, 0, 458778, 131072, 0, 524314, 131072, 0, 589850, 131072, 0, 655386, 131072, 0, 720922, 131072, 0, 786458, 131072, 0, 851994, 131072, 0, 917530, 131072, 0)
layer_1/name = "Ground02"
layer_1/enabled = true
layer_1/modulate = Color(1, 1, 1, 1)
layer_1/y_sort_enabled = false
layer_1/y_sort_origin = 0
layer_1/z_index = 1
layer_1/tile_data = PackedInt32Array(851968, 196608, 2, 851969, 196608, 2, 851970, 196608, 2, 851971, 196608, 2, 851972, 196608, 2, 851973, 196608, 2, 851974, 196608, 2, 851975, 196608, 2, 851976, 196608, 2, 851977, 196608, 2, 851978, 196608, 2, 851979, 196608, 2, 851980, 196608, 2, 851981, 196608, 2, 851982, 196608, 2, 851983, 196608, 2, 851984, 196608, 2, 851985, 196608, 2, 851986, 196608, 2, 851987, 196608, 2, 851988, 196608, 2, 851989, 196608, 2, 851990, 196608, 2, 851991, 196608, 2, 851992, 196608, 2, 851993, 196608, 2, 851994, 196608, 2, 786432, 196608, 1, 786433, 196608, 1, 786434, 196608, 1, 786435, 196608, 1, 786436, 196608, 1, 786437, 196608, 1, 786438, 196608, 1, 786439, 196608, 1, 786440, 196608, 1, 786441, 196608, 1, 786442, 196608, 1, 786443, 196608, 1, 786444, 196608, 1, 786445, 196608, 1, 786446, 196608, 1, 786447, 196608, 1, 786448, 196608, 1, 786449, 196608, 1, 786450, 196608, 1, 786451, 196608, 1, 786452, 196608, 1, 786453, 196608, 1, 786454, 196608, 1, 786455, 196608, 1, 786456, 196608, 1, 786457, 196608, 1, 786458, 196608, 1, 720896, 131072, 1, 720897, 131072, 1, 720898, 131072, 1, 720899, 131072, 1, 720900, 131072, 1, 720901, 131072, 1, 720902, 131072, 1, 720903, 131072, 1, 720904, 131072, 1, 720905, 131072, 1, 720906, 131072, 1, 720907, 131072, 1, 720908, 131072, 1, 720909, 131072, 1, 720910, 131072, 1, 720911, 131072, 1, 720912, 131072, 1, 720913, 131072, 1, 720914, 131072, 1, 720915, 131072, 1, 720916, 131072, 1, 720917, 131072, 1, 720918, 131072, 1, 720919, 131072, 1, 720920, 131072, 1, 720921, 131072, 1, 720922, 131072, 1)
layer_2/name = "Ground03"
layer_2/enabled = true
layer_2/modulate = Color(1, 1, 1, 1)
layer_2/y_sort_enabled = false
layer_2/y_sort_origin = 0
layer_2/z_index = 2
layer_2/tile_data = PackedInt32Array(917504, 0, 4, 917505, 0, 4, 917506, 0, 4, 917507, 0, 4, 917508, 0, 4, 917509, 0, 4, 917510, 0, 4, 917511, 0, 4, 917512, 0, 4, 917513, 0, 4, 917514, 0, 4, 917515, 0, 4, 917516, 0, 4, 917517, 0, 4, 917518, 0, 4, 917519, 0, 4, 917520, 0, 4, 917521, 0, 4, 917522, 0, 4, 917523, 0, 4, 917524, 0, 4, 917525, 0, 4, 917526, 0, 4, 917527, 0, 4, 917528, 0, 4, 917529, 0, 4, 917530, 0, 4, 720896, 196608, 2, 720897, 196608, 2, 720898, 196608, 2, 720899, 196608, 2, 720900, 196608, 2, 720901, 196608, 2, 720902, 196608, 2, 720903, 196608, 2, 720904, 196608, 2, 720905, 196608, 2, 720906, 196608, 2, 720907, 196608, 2, 720908, 196608, 2, 720909, 196608, 2, 720910, 196608, 2, 720911, 196608, 2, 720912, 196608, 2, 720913, 196608, 2, 720914, 196608, 2, 720915, 196608, 2, 720916, 196608, 2, 720917, 196608, 2, 720918, 196608, 2, 720919, 196608, 2, 720920, 196608, 2, 720921, 196608, 2, 720922, 196608, 2, 655360, 196608, 2, 655361, 196608, 2, 655362, 196608, 2, 655363, 196608, 2, 655364, 196608, 2, 655365, 196608, 2, 655366, 196608, 2, 655367, 196608, 2, 655368, 196608, 2, 655369, 196608, 2, 655370, 196608, 2, 655371, 196608, 2, 655372, 196608, 2, 655373, 196608, 2, 655374, 196608, 2, 655375, 196608, 2, 655376, 196608, 2, 655377, 196608, 2, 655378, 196608, 2, 655379, 196608, 2, 655380, 196608, 2, 655381, 196608, 2, 655382, 196608, 2, 655383, 196608, 2, 655384, 196608, 2, 655385, 196608, 2, 655386, 196608, 2, 589824, 196608, 1, 589825, 196608, 1, 589826, 196608, 1, 589827, 196608, 1, 589828, 196608, 1, 589829, 196608, 1, 589830, 196608, 1, 589831, 196608, 1, 589832, 196608, 1, 589833, 196608, 1, 589834, 196608, 1, 589835, 196608, 1, 589836, 196608, 1, 589837, 196608, 1, 589838, 196608, 1, 589839, 196608, 1, 589840, 196608, 1, 589841, 196608, 1, 589842, 196608, 1, 589843, 196608, 1, 589844, 196608, 1, 589845, 196608, 1, 589846, 196608, 1, 589847, 196608, 1, 589848, 196608, 1, 589849, 196608, 1, 589850, 196608, 1, 524288, 0, 2, 524289, 0, 2, 524290, 0, 2, 524291, 0, 2, 524292, 0, 2, 524293, 0, 2, 524294, 0, 2, 524295, 0, 2, 524296, 0, 2, 524297, 0, 2, 524298, 0, 2, 524299, 0, 2, 524300, 0, 2, 524301, 0, 2, 524302, 0, 2, 524303, 0, 2, 524304, 0, 2, 524305, 0, 2, 524306, 0, 2, 524307, 0, 2, 524308, 0, 2, 524309, 0, 2, 524310, 0, 2, 524311, 0, 2, 524312, 0, 2, 524313, 0, 2, 524314, 0, 2, 0, 196608, 3, 65536, 196608, 3, 131072, 196608, 3, 196608, 196608, 3, 262144, 196608, 3, 327680, 196608, 3, 393216, 196608, 3, 458752, 196608, 3, 1, 196608, 3, 65537, 196608, 3, 131073, 196608, 3, 196609, 196608, 3, 262145, 196608, 3, 327681, 196608, 3, 393217, 196608, 3, 458753, 196608, 3, 2, 196608, 3, 65538, 196608, 3, 131074, 196608, 3, 196610, 196608, 3, 262146, 196608, 3, 327682, 196608, 3, 393218, 196608, 3, 458754, 196608, 3, 3, 196608, 3, 65539, 196608, 3, 131075, 196608, 3, 196611, 196608, 3, 262147, 196608, 3, 327683, 196608, 3, 393219, 196608, 3, 458755, 196608, 3, 4, 196608, 3, 65540, 196608, 3, 131076, 196608, 3, 196612, 196608, 3, 262148, 196608, 3, 327684, 196608, 3, 393220, 196608, 3, 458756, 196608, 3, 5, 196608, 3, 65541, 196608, 3, 131077, 196608, 3, 196613, 196608, 3, 262149, 196608, 3, 327685, 196608, 3, 393221, 196608, 3, 458757, 196608, 3, 6, 196608, 3, 65542, 196608, 3, 131078, 196608, 3, 196614, 196608, 3, 262150, 196608, 3, 327686, 196608, 3, 393222, 196608, 3, 458758, 196608, 3, 7, 196608, 3, 65543, 196608, 3, 131079, 196608, 3, 196615, 196608, 3, 262151, 196608, 3, 327687, 196608, 3, 393223, 196608, 3, 458759, 196608, 3, 8, 196608, 3, 65544, 196608, 3, 131080, 196608, 3, 196616, 196608, 3, 262152, 196608, 3, 327688, 196608, 3, 393224, 196608, 3, 458760, 196608, 3, 9, 196608, 3, 65545, 196608, 3, 131081, 196608, 3, 196617, 196608, 3, 262153, 196608, 3, 327689, 196608, 3, 393225, 196608, 3, 458761, 196608, 3, 10, 196608, 3, 65546, 196608, 3, 131082, 196608, 3, 196618, 196608, 3, 262154, 196608, 3, 327690, 196608, 3, 393226, 196608, 3, 458762, 196608, 3, 11, 196608, 3, 65547, 196608, 3, 131083, 196608, 3, 196619, 196608, 3, 262155, 196608, 3, 327691, 196608, 3, 393227, 196608, 3, 458763, 196608, 3, 12, 196608, 3, 65548, 196608, 3, 131084, 196608, 3, 196620, 196608, 3, 262156, 196608, 3, 327692, 196608, 3, 393228, 196608, 3, 458764, 196608, 3, 13, 196608, 3, 65549, 196608, 3, 131085, 196608, 3, 196621, 196608, 3, 262157, 196608, 3, 327693, 196608, 3, 393229, 196608, 3, 458765, 196608, 3, 14, 196608, 3, 65550, 196608, 3, 131086, 196608, 3, 196622, 196608, 3, 262158, 196608, 3, 327694, 196608, 3, 393230, 196608, 3, 458766, 196608, 3, 15, 196608, 3, 65551, 196608, 3, 131087, 196608, 3, 196623, 196608, 3, 262159, 196608, 3, 327695, 196608, 3, 393231, 196608, 3, 458767, 196608, 3, 16, 196608, 3, 65552, 196608, 3, 131088, 196608, 3, 196624, 196608, 3, 262160, 196608, 3, 327696, 196608, 3, 393232, 196608, 3, 458768, 196608, 3, 17, 196608, 3, 65553, 196608, 3, 131089, 196608, 3, 196625, 196608, 3, 262161, 196608, 3, 327697, 196608, 3, 393233, 196608, 3, 458769, 196608, 3, 18, 196608, 3, 65554, 196608, 3, 131090, 196608, 3, 196626, 196608, 3, 262162, 196608, 3, 327698, 196608, 3, 393234, 196608, 3, 458770, 196608, 3, 19, 196608, 3, 65555, 196608, 3, 131091, 196608, 3, 196627, 196608, 3, 262163, 196608, 3, 327699, 196608, 3, 393235, 196608, 3, 458771, 196608, 3, 20, 196608, 3, 65556, 196608, 3, 131092, 196608, 3, 196628, 196608, 3, 262164, 196608, 3, 327700, 196608, 3, 393236, 196608, 3, 458772, 196608, 3, 21, 196608, 3, 65557, 196608, 3, 131093, 196608, 3, 196629, 196608, 3, 262165, 196608, 3, 327701, 196608, 3, 393237, 196608, 3, 458773, 196608, 3, 22, 196608, 3, 65558, 196608, 3, 131094, 196608, 3, 196630, 196608, 3, 262166, 196608, 3, 327702, 196608, 3, 393238, 196608, 3, 458774, 196608, 3, 23, 196608, 3, 65559, 196608, 3, 131095, 196608, 3, 196631, 196608, 3, 262167, 196608, 3, 327703, 196608, 3, 393239, 196608, 3, 458775, 196608, 3, 24, 196608, 3, 65560, 196608, 3, 131096, 196608, 3, 196632, 196608, 3, 262168, 196608, 3, 327704, 196608, 3, 393240, 196608, 3, 458776, 196608, 3, 25, 196608, 3, 65561, 196608, 3, 131097, 196608, 3, 196633, 196608, 3, 262169, 196608, 3, 327705, 196608, 3, 393241, 196608, 3, 458777, 196608, 3, 26, 196608, 3, 65562, 196608, 3, 131098, 196608, 3, 196634, 196608, 3, 262170, 196608, 3, 327706, 196608, 3, 393242, 196608, 3, 458778, 196608, 3)
layer_3/name = "Decoration"
layer_3/enabled = true
layer_3/modulate = Color(1, 1, 1, 1)
layer_3/y_sort_enabled = false
layer_3/y_sort_origin = 0
layer_3/z_index = 3
layer_3/tile_data = PackedInt32Array(917506, 65536, 3, 917507, 65536, 1, 917508, 65536, 3, 917509, 65536, 3, 917511, 65536, 2, 917520, 65536, 1, 917523, 65536, 3, 917524, 65536, 1, 917527, 65536, 3, 917528, 65536, 4, 524288, 65536, 3, 524290, 65536, 4, 524294, 65536, 3, 524303, 65536, 2, 524305, 65536, 4, 524310, 65536, 3)
layer_4/name = "Obstacles/Lillypads"
layer_4/enabled = true
layer_4/modulate = Color(1, 1, 1, 1)
layer_4/y_sort_enabled = false
layer_4/y_sort_origin = 0
layer_4/z_index = 4
layer_4/tile_data = PackedInt32Array(917529, 196608, 4, 917505, 196608, 4, 524290, 196608, 4, 524311, 196608, 4, 720899, 262144, 0, 720898, 262144, 0, 720897, 262144, 0, 720900, 262144, 0, 720901, 262144, 0, 720902, 262144, 2, 720896, 262144, 0, 720905, 262144, 1, 720906, 262144, 0, 720907, 262144, 0, 720908, 262144, 0, 720909, 262144, 0, 720910, 262144, 0, 720911, 262144, 0, 720912, 262144, 0, 720913, 262144, 0, 720914, 262144, 2, 720917, 262144, 1, 720918, 262144, 0, 720919, 262144, 0, 720920, 262144, 0, 720921, 262144, 0, 720922, 262144, 0, 524292, 262144, 0, 524293, 262144, 0, 524294, 262144, 0, 524295, 262144, 0, 524296, 262144, 0, 524297, 262144, 2, 524301, 262144, 1, 524302, 262144, 0, 524303, 262144, 0, 524304, 262144, 0, 524305, 262144, 0, 524306, 262144, 0, 524307, 262144, 0, 524308, 262144, 0, 524309, 262144, 0, 524310, 262144, 2, 524291, 262144, 1, 917511, 196608, 4, 917512, 196608, 4, 917524, 196608, 4, 917519, 196608, 4)

[node name="Frog" parent="." instance=ExtResource("1_oip3v")]
z_index = 999
position = Vector2(400, 464)
up_direction = Vector2(0.999997, -0.00243308)

[node name="Floatables_Lillypad_01" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Lillypad_02" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Lillypad_03" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Lillypad_04" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Lillypad_05" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_01" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_02" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_03" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_04" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_05" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_06" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_07" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_08" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_09" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_10" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_11" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Turtle_12" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_01" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_02" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_03" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_04" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_05" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_06" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_07" parent="." instance=ExtResource("3_q2diy")]

[node name="Floatables_Log_Croc_08" parent="." instance=ExtResource("3_q2diy")]

[connection signal="body_entered" from="Area2D_water" to="Frog" method="_on_area_2d_water_body_entered"]
[connection signal="body_exited" from="Area2D_water" to="Frog" method="_on_area_2d_water_body_exited"]
